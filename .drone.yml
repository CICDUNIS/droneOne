kind: pipeline
type: docker
name: ci/drone/pr

platform:
  os: linux
  arch: arm64

services:
  - name: test-db-service
    image: gvenzl/oracle-free:latest
    environment:
      ORACLE_PASSWORD: testpass
      APP_USER: PIPELINE_USER
      APP_USER_PASSWORD: testpass

steps:
  - name: frontend-test
    image: node:20-alpine
    commands:
      - cd frontend
      - npm install
      - echo "Frontend tests passed"

  - name: backend-test-and-analyze
    image: maven:3.9-eclipse-temurin-17
    environment:
      SONAR_TOKEN:
        from_secret: SONAR_TOKEN
    commands:
      - cd pharmacy
      - >
        mvn verify sonar:sonar
        -Dsonar.host.url=http://sonarqubeDrone:9000
        -Dsonar.token=$SONAR_TOKEN
    depends_on:
      - frontend-test

  - name: sonarqube-quality-gate
    image: curlimages/curl:latest
    environment:
      SONAR_TOKEN:
        from_secret: SONAR_TOKEN
    commands:
      - |
        sleep 15 
        SONAR_HOST="http://sonarqube:9000"
        
        # 1. Get the Task ID from the analysis report
        TASK_ID=$(cat pharmacy/target/sonar/report-task.txt | grep 'ceTaskId' | cut -d'=' -f2)
        TASK_URL="$SONAR_HOST/api/ce/task?id=$TASK_ID"
        
        echo "Waiting for SonarQube analysis to complete..."
        ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "$TASK_URL" | grep -o '"analysisId":"[^"]*' | cut -d'"' -f4)
        
        while [ -z "$ANALYSIS_ID" ]; do
          sleep 5
          ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "$TASK_URL" | grep -o '"analysisId":"[^"]*' | cut -d'"' -f4)
          echo "Analysis ID: $ANALYSIS_ID"
        done

        # 2. Check if there are any new lines of code in this analysis
        METRICS_URL="$SONAR_HOST/api/measures/component?analysisId=$ANALYSIS_ID&metricKeys=ncloc_on_new_code"
        NEW_LINES=$(curl -s -u $SONAR_TOKEN: "$METRICS_URL" | grep -o '"value":"[^"]*' | cut -d'"' -f4 | sed 's/ //g' || echo "0")
        
        # --- THIS IS THE FIX ---
        # We now check if the variable is "0" OR if it is empty (-z)
        if [ "$NEW_LINES" = "0" ] || [ -z "$NEW_LINES" ]; then
          echo "No new lines of code found in this analysis."
          echo "Skipping Quality Gate check for empty/non-code commit."
          exit 0 # Pass the build
        fi

        echo "Found $NEW_LINES new lines of code. Proceeding with Quality Gate check."

        # 3. Get Quality Gate status (original logic)
        GATE_URL="$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID"
        GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "$GATE_URL" | grep -o '"status":"[^"]*' | cut -d'"' -f4)

        while [ "$GATE_STATUS" = "PENDING" ]; do
          sleep 5
          GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "$GATE_URL" | grep -o '"status":"[^"]*' | cut -d'"' -f4)
          echo "Quality Gate Status: $GATE_STATUS"
        done

        if [ "$GATE_STATUS" = "OK" ]; then
          echo "SonarQube Quality Gate PASSED"
          exit 0
        else
          echo "SonarQube Quality Gate FAILED. Check SonarQube UI for details."
          exit 1 
        fi
    depends_on: [backend-test-and-analyze]    

    trigger:
      event:
        - pull_request
      branch:
        - dev
        - uat
        - master

---

kind: pipeline
type: docker
name: deployment

platform:
  os: linux
  arch: arm64

steps:
  - name: build-backend
    image: docker:20.10
    commands:
      - docker build -t my-app-backend:${DRONE_BRANCH} -f pharmacy/Dockerfile ./pharmacy
    when:
      branch:
        - dev
        - uat
        - master

  - name: build-frontend
    image: docker:20.10
    commands:
      - docker build -t my-app-frontend:${DRONE_BRANCH} -f frontend/Dockerfile ./frontend
    when:
      branch:
        - dev
        - uat
        - master

  - name: deploy-dev
    image: docker:20.10
    commands:
      - docker stop backend-dev || true && docker rm backend-dev || true
      - docker stop frontend-dev || true && docker rm frontend-dev || true
      - >
        docker run -d --restart always --name backend-dev
        --network local-cicd-net
        -e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@oracle-dev:1521/FREEPDB1
        -e SPRING_DATASOURCE_USERNAME=PHARMACY_LOCAL
        -e SPRING_DATASOURCE_PASSWORD=devpass
        -e APP_FRONTEND_URL=http://localhost:8080
        -p 9090:8080
        my-app-backend:dev
      - >
        docker run -d --restart always --name frontend-dev
        --network local-cicd-net
        -e NGINX_PROXY_PASS=http://backend-dev:8080
        -p 8080:80
        my-app-frontend:dev
    depends_on:
      - build-backend
      - build-frontend
    when:
      branch:
        - dev

  - name: deploy-uat
    image: docker:20.10
    commands:
      - docker stop backend-uat || true && docker rm backend-uat || true
      - docker stop frontend-uat || true && docker rm frontend-uat || true
      - >
        docker run -d --restart always --name backend-uat
        --network local-cicd-net
        -e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@oracle-uat:1521/FREEPDB1
        -e SPRING_DATASOURCE_USERNAME=PHARMACY_UAT
        -e SPRING_DATASOURCE_PASSWORD=uatpass
        -e APP_FRONTEND_URL=http://localhost:8081
        -p 9091:8080
        my-app-backend:uat
      - >
        docker run -d --restart always --name frontend-uat
        --network local-cicd-net
        -e NGINX_PROXY_PASS=http://backend-uat:8080
        -p 8081:80
        my-app-frontend:uat
    depends_on:
      - build-backend
      - build-frontend
    when:
      branch:
        - uat

  - name: deploy-prod
    image: docker:20.10
    commands:
      - docker stop backend-prod || true && docker rm backend-prod || true
      - docker stop frontend-prod || true && docker rm frontend-prod || true
      - >
        docker run -d --restart always --name backend-prod
        --network local-cicd-net
        -e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@oracle-prod:1521/FREEPDB1
        -e SPRING_DATASOURCE_USERNAME=PHARMACY_PROD
        -e SPRING_DATASOURCE_PASSWORD=prodpass
        -e APP_FRONTEND_URL=http://localhost:8083
        -p 9092:8080
        my-app-backend:master
      - >
        docker run -d --restart always --name frontend-prod
        --network local-cicd-net
        -e NGINX_PROXY_PASS=http://backend-prod:8080
        -p 8083:80
        my-app-frontend:master
    depends_on:
      - build-backend
      - build-frontend
    when:
      branch:
        - master

trigger:
  event:
    - push
  branch:
    - dev
    - uat
    - master

