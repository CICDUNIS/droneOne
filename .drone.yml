kind: pipeline
type: docker
name: ci/drone/pr  

platform:
  os: linux
  arch: arm64

services:
  - name: test-db-service
    image: gvenzl/oracle-free:latest
    environment:
      ORACLE_PASSWORD: testpass
      APP_USER: PIPELINE_USER
      APP_USER_PASSWORD: testpass

steps:
  - name: frontend-test
    image: node:20-alpine
    commands:
      - cd frontend
      - npm install
      - echo "Frontend tests passed" 

  - name: backend-test-and-analyze
    image: maven:3.9-eclipse-temurin-17
    environment:
      SONAR_TOKEN:
        from_secret: SONAR_TOKEN
    commands:
      - cd pharmacy
      - |
        mvn verify sonar:sonar \
          -Dsonar.host.url=http://sonarqubeDrone:9000 \
          -Dsonar.token=$SONAR_TOKEN \
          -Dsonar.pullrequest.key=${DRONE_PULL_REQUEST} \
          -Dsonar.pullrequest.branch=${DRONE_SOURCE_BRANCH} \
          -Dsonar.pullrequest.base=${DRONE_TARGET_BRANCH}
    depends_on: [frontend-test]

  - name: sonarqube-quality-gate
    image: curlimages/curl:latest
    environment:
      SONAR_TOKEN:
        from_secret: SONAR_TOKEN
    commands:
      - |
        sleep 15 
        SONAR_HOST="http://sonarqubeDrone:9000"
        TASK_URL="$SONAR_HOST/api/ce/task?id=$(cat pharmacy/target/sonar/report-task.txt | grep 'ceTaskId' | cut -d'=' -f2)"
        
        echo "Waiting for SonarQube analysis..."
        ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "$TASK_URL" | grep -o '"analysisId":"[^"]*' | cut -d'"' -f4)
        
        while [ -z "$ANALYSIS_ID" ]; do
          sleep 5
          ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "$TASK_URL" | grep -o '"analysisId":"[^"]*' | cut -d'"' -f4)
          echo "Analysis ID: $ANALYSIS_ID"
        done

        GATE_URL="$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID"
        GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "$GATE_URL" | grep -o '"status":"[^"]*' | cut -d'"' -f4)

        while [ "$GATE_STATUS" = "PENDING" ]; do
          sleep 5
          GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "$GATE_URL" | grep -o '"status":"[^"]*' | cut -d'"' -f4)
          echo "Quality Gate Status: $GATE_STATUS"
        done

        if [ "$GATE_STATUS" = "OK" ]; then
          echo "SonarQube Quality Gate PASSED"
          exit 0
        else
          echo "SonarQube Quality Gate FAILED. Check SonarQube UI for details."
          exit 1 
        fi
    depends_on: [backend-test-and-analyze]

trigger:
  event:
    - pull_request
  branch:
    - dev
    - uat
    - master

---

kind: pipeline
type: docker
name: deployment

platform:
  os: linux
  arch: arm64

steps:
  - name: build-backend
    image: docker:20.10
    volumes:
      - name: dockersock
        host:
          path: /var/run/docker.sock
    commands:
      - docker build -t my-app-backend:${DRONE_BRANCH} -f pharmacy/Dockerfile ./pharmacy
    when:
      branch: [dev, uat, master]

  - name: build-frontend
    image: docker:20.10
    volumes:
      - name: dockersock
        host:
          path: /var/run/docker.sock
    commands:
      - docker build -t my-app-frontend:${DRONE_BRANCH} -f frontend/Dockerfile ./frontend
    when:
      branch: [dev, uat, master]

  - name: deploy-dev
    image: docker:20.10
    volumes:
      - name: dockersock
        host:
          path: /var/run/docker.sock
    commands:
      - docker stop backend-dev || true && docker rm backend-dev || true
      - docker stop frontend-dev || true && docker rm frontend-dev || true
      - |
        docker run -d --restart always --name backend-dev \
          --network local-cicd-net \
          -e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@oracle-dev:1WELCOME/FREEPDB1 \
          -e SPRING_DATASOURCE_USERNAME=PHARMACY_LOCAL \
          -e SPRING_DATASOURCE_PASSWORD=devpass \
          -e APP_FRONTEND_URL=http://localhost:8080 \
          -p 9090:8080 \
          my-app-backend:dev
      - |
        docker run -d --restart always --name frontend-dev \
          --network local-cicd-net \
          -e NGINX_PROXY_PASS=http://backend-dev:8080 \
          -p 8080:80 \
          my-app-frontend:dev
    depends_on: [build-backend, build-frontend]
    when:
      branch: dev

  - name: deploy-uat
    image: docker:20.10
    volumes:
      - name: dockersock
        host:
          path: /var/run/docker.sock
    commands:
      - docker stop backend-uat || true && docker rm backend-uat || true
      - docker stop frontend-uat || true && docker rm frontend-uat || true
      - |
        docker run -d --restart always --name backend-uat \
          --network local-cicd-net \
          -e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@oracle-uat:1WELCOME/FREEPDB1 \
          -e SPRING_DATASOURCE_USERNAME=PHARMACY_UAT \
          -e SPRING_DATASOURCE_PASSWORD=uatpass \
          -e APP_FRONTEND_URL=http://localhost:8081 \
          -p 9091:8080 \
          my-app-backend:uat
      - |
        docker run -d --restart always --name frontend-uat \
          --network local-cicd-net \
          -e NGINX_PROXY_PASS=http://backend-uat:8080 \
          -p 8081:80 \
          my-app-frontend:uat
    depends_on: [build-backend, build-frontend]
    when:
      branch: uat

  - name: deploy-prod
    image: docker:20.10
    volumes:
      - name: dockersock
        host:
          path: /var/run/docker.sock
    commands:
      - docker stop backend-prod || true && docker rm backend-prod || true
      - docker stop frontend-prod || true && docker rm frontend-prod || true
      - |
        docker run -d --restart always --name backend-prod \
          --network local-cicd-net \
          -e SPRING_DATASOURCE_URL=jdbc:oracle:thin:@oracle-prod:1WELCOME/FREEPDB1 \
          -e SPRING_DATASOURCE_USERNAME=PHARMACY_PROD \
          -e SPRING_DATASOURCE_PASSWORD=prodpass \
          -e APP_FRONTEND_URL=http://localhost:8083 \
          -p 9092:8080 \
          my-app-backend:master
      - |
        docker run -d --restart always --name frontend-prod \
          --network local-cicd-net \
          -e NGINX_PROXY_PASS=http://backend-prod:8080 \
          -p 8083:80 \
          my-app-frontend:master
    depends_on: [build-backend, build-frontend]
    when:
      branch: master

trigger:
  event:
    - push
  branch:
    - dev
    - uat
    - master

